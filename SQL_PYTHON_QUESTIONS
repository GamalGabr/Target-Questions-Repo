[
  {
    "id": "1",
    "question": "The following query counts the number of distinct players participating in matches:\n\n```sql\nSELECT COUNT(DISTINCT Players.PlayerID) \nFROM Players \nINNER JOIN Matches \nON Players.PlayerID = Matches.PlayerID;\n```",
    "options": [
      "len(pd.merge(players, matches, on='PlayerID', how='inner'))",
      "merged_df['PlayerID'].nunique()",
      "players['PlayerID'].nunique()",
      "len(players.merge(matches, on='PlayerID'))"
    ],
    "correct": "merged_df['PlayerID'].nunique()",
    "commentary": "The correct Python equivalent uses pandas' `merge` function to perform an inner join, followed by the `nunique` method to count distinct PlayerIDs.",
    "python_equivalent": "import pandas as pd\n\n# Sample data for Players and Matches tables\nplayers = pd.DataFrame({'PlayerID': [1, 2, 3], 'Name': ['Alice', 'Bob', 'Charlie']})\nmatches = pd.DataFrame({'PlayerID': [2, 3, 4], 'MatchID': [101, 102, 103]})\n\n# Perform an inner join between players and matches on PlayerID\nmerged_df = pd.merge(players, matches, on='PlayerID', how='inner')\n\n# Count the distinct PlayerIDs in the result\ndistinct_count = merged_df['PlayerID'].nunique()\nprint(distinct_count)  # Output: 2"
  },
  {
    "id": "2",
    "question": "The following query finds players who have no matches:\n\n```sql\nSELECT Players.PlayerID \nFROM Players \nLEFT JOIN Matches \nON Players.PlayerID = Matches.PlayerID \nWHERE Matches.PlayerID IS NULL;\n```",
    "options": [
      "merged_df[merged_df['_merge'] == 'left_only']['PlayerID']",
      "players.merge(matches, on='PlayerID', how='left', indicator=True)",
      "merged_df.query('_merge == \"left_only\"')['PlayerID']",
      "len(players) - len(matches)"
    ],
    "correct": "merged_df[merged_df['_merge'] == 'left_only']['PlayerID']",
    "commentary": "To find players without matches in Python, use pandas' `merge` with `how='left'` and `indicator=True`, then filter where `_merge` equals `'left_only'`.",
    "python_equivalent": "import pandas as pd\n\n# Sample data for Players and Matches tables\nplayers = pd.DataFrame({'PlayerID': [1, 2, 3], 'Name': ['Alice', 'Bob', 'Charlie']})\nmatches = pd.DataFrame({'PlayerID': [2, 3], 'MatchID': [101, 102]})\n\n# Perform a left join between players and matches on PlayerID\nmerged_df = pd.merge(players, matches, on='PlayerID', how='left', indicator=True)\n\n# Filter rows where '_merge' indicates that the PlayerID is only in the left table\nno_matches = merged_df[merged_df['_merge'] == 'left_only']\nprint(no_matches['PlayerID'].tolist())  # Output: [1]"
  },
  {
    "id": "3",
    "question": "The following query counts the number of matches each player has participated in:\n\n```sql\nSELECT PlayerID, COUNT(*) AS MatchCount \nFROM Matches \nGROUP BY PlayerID;\n```",
    "options": [
      "matches.groupby('PlayerID').size()",
      "matches.groupby('PlayerID').count()",
      "matches['PlayerID'].value_counts()",
      "matches.groupby('PlayerID').size().reset_index(name='MatchCount')"
    ],
    "correct": "matches.groupby('PlayerID').size().reset_index(name='MatchCount')",
    "commentary": "In Python, the equivalent of GROUP BY in SQL is pandas' `groupby`, and COUNT(*) can be achieved using `size` or `count`. Here, `reset_index` is used to convert the result back into a DataFrame.",
    "python_equivalent": "import pandas as pd\n\n# Sample data for Matches table\nmatches = pd.DataFrame({'PlayerID': [1, 2, 2, 3], 'MatchID': [101, 102, 103, 104]})\n\n# Group the Matches table by PlayerID and count the number of rows in each group\nmatch_counts = matches.groupby('PlayerID').size().reset_index(name='MatchCount')\nprint(match_counts)\n# Output:\n#    PlayerID  MatchCount\n# 0         1           1\n# 1         2           2\n# 2         3           1"
  },
  {
    "id": "4",
    "question": "The following query finds players who have participated in more than 2 matches:\n\n```sql\nSELECT PlayerID \nFROM Matches \nGROUP BY PlayerID \nHAVING COUNT(*) > 2;\n```",
    "options": [
      "matches.groupby('PlayerID').filter(lambda x: len(x) > 2)",
      "matches.groupby('PlayerID').size().query('size > 2')",
      "matches.groupby('PlayerID').agg('count').query('size > 2')",
      "matches.groupby('PlayerID').size().reset_index(name='MatchCount').query('MatchCount > 2')"
    ],
    "correct": "matches.groupby('PlayerID').size().reset_index(name='MatchCount').query('MatchCount > 2')",
    "commentary": "To replicate HAVING COUNT(*) > 2 in pandas, use `groupby` and `size` to count rows, then filter using `query`.",
    "python_equivalent": "import pandas as pd\n\n# Sample data for Matches table\nmatches = pd.DataFrame({'PlayerID': [1, 2, 2, 2, 3, 3], 'MatchID': [101, 102, 103, 104, 105, 106]})\n\n# Group the Matches table by PlayerID\n# Count matches per player and filter groups with more than 2 matches\nfiltered_players = matches.groupby('PlayerID').size().reset_index(name='MatchCount').query('MatchCount > 2')\nprint(filtered_players)\n# Output:\n#    PlayerID  MatchCount\n# 1         2           3"
  },
  {
    "id": "5",
    "question": "The following query combines all unique PlayerIDs from Players and Matches:\n\n```sql\nSELECT PlayerID \nFROM Players \nUNION \nSELECT PlayerID \nFROM Matches;\n```",
    "options": [
      "pd.concat([players['PlayerID'], matches['PlayerID']]).drop_duplicates()",
      "players['PlayerID'].append(matches['PlayerID']).unique()",
      "pd.merge(players, matches, on='PlayerID', how='outer')['PlayerID'].unique()",
      "players['PlayerID'].combine_first(matches['PlayerID']).unique()"
    ],
    "correct": "pd.concat([players['PlayerID'], matches['PlayerID']]).drop_duplicates()",
    "commentary": "In Python, the UNION operation is replicated by concatenating the columns of the two DataFrames and removing duplicates using `drop_duplicates`.",
    "python_equivalent": "import pandas as pd\n\n# Sample data for Players and Matches tables\nplayers = pd.DataFrame({'PlayerID': [1, 2, 3]})\nmatches = pd.DataFrame({'PlayerID': [3, 4, 5]})\n\n# Combine PlayerIDs from both DataFrames and remove duplicates\nunion_df = pd.concat([players['PlayerID'], matches['PlayerID']]).drop_duplicates()\nprint(union_df)\n# Output:\n# 0    1\n# 1    2\n# 2    3\n# 3    4\n# 4    5"
  }
]
